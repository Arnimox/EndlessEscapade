using Terraria;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using System.Reflection;
using Microsoft.Xna.Framework;
using Terraria.Utilities;
using Terraria.World.Generation;
using Terraria.GameContent.Generation;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using ReLogic.Graphics;
using Terraria.UI;
using Terraria.GameContent.UI.States;
using Microsoft.Xna.Framework.Graphics;
using MonoMod.Cil;

namespace EEMod
{

    public abstract class CoralReefs : EESubWorld
    {
        public abstract int maxTilesX
        {
            get;
            set;
        }
        public abstract int maxTilesY
        {
            get;
            set;
        }
        public abstract int spawnTileX
        {
            get;
            set;
        }
        public abstract int spawnTileY
        {
            get;
            set;
        }
        public static int _lastSeed;

        private static WorldGenerator _generator;
        private static void AddGenerationPass(string name, WorldGenLegacyMethod method)
        {
            _generator.Append(new PassLegacy(name, method));
        }
        EESubWorld(int maxTilesX, int maxTilesY, int spawnTileX, int spawnTileY, int seed, GenerationProgress customProgressObject = null)
        {
            maxTilesX = this.maxTilesX;
            maxTilesY = this.maxTilesX;
            spawnTileX = this.spawnTileX;
            spawnTileY = this.spawnTileY;

            Main.maxTilesX = maxTilesX;
            Main.maxTilesY = maxTilesY;
            Main.spawnTileX = spawnTileX;
            Main.spawnTileY = spawnTileY;
            Logging.Terraria.InfoFormat("Generating World: {0}", (object)Main.ActiveWorldFileData.Name);
            _lastSeed = seed;
            _generator = new WorldGenerator(seed);
            MicroBiome.ResetAll();

            //WorldHooks.PreWorldGen();
            AddGenerationPass("Reset", delegate (GenerationProgress progress)
            {
                Liquid.ReInit();
                progress.Message = "";
                Main.cloudAlpha = 0f;
                Main.maxRaining = 0f;
                Main.raining = false;
                WorldGen.RandomizeTreeStyle();
                WorldGen.RandomizeCaveBackgrounds();
                WorldGen.RandomizeBackgrounds();
                WorldGen.RandomizeMoonState();

            });
            Main.worldID = WorldGen.genRand.Next(int.MaxValue);
            //WorldHooks.ModifyWorldGenTasks(_generator._passes, ref _generator._totalLoadWeight);
            _generator.GenerateWorld(customProgressObject);
            //Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
        }
    }
}
